from __future__ import print_function
import boto3
#import logging

# SNS Topic Definition for EC2
ec2_sns = 'arn:aws:sns:us-east-2:00000000000:cpu-alarm'

# Create AWS clients
ec2session = boto3.client('ec2')
cw = boto3.client('cloudwatch')

# Retrives instance id from cloudwatch event
#def get_instance_id(event):
#    try:
#        return event['detail']['instance-id']
#    except KeyError as err:
#        LOGGER.error(err)
#        return False

def lambda_handler(event, context):

    session = boto3.session.Session()
    ec2session = session.client('ec2')
#    instanceid = get_instance_id(event)

    #Get EC2 instances per region
    allInstances = ec2session.describe_instances()


    for reservation in allInstances["Reservations"]:
        for instance in reservation["Instances"]:
    # Create Metric "CPU Utilization Greater than 95% for 15+ Minutes"
            cw.put_metric_alarm(
            AlarmName="%s high CPU" % (instance["InstanceId"]),
            AlarmDescription='CPU Utilization Greater than 95% for 15+ Minutes',
            ActionsEnabled=True,
            AlarmActions=[
                ec2_sns
            ],
            MetricName='CPUUtilization',
            Namespace='AWS/EC2',
            Statistic='Average',
            Dimensions=[
                {
                    'Name': 'InstanceId',
                    'Value': instance["InstanceId"]
                },
            ],
            Period=300,
            EvaluationPeriods=3,
            Threshold=95.0,
            ComparisonOperator='GreaterThanOrEqualToThreshold'
        )
